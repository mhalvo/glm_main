exp(.5)-1
exp(2*.5)-exp(.5)
exp(3*.5)-exp(2*.5)
rm(list=ls())
library('tidyverse')
set.seed(1337)
###########
# Poisson #
###########
### create some data from a poisson model
x1 <- rnorm(1000, 0, 1)
x2 <- rbinom(1000, 1, .35)
y <- exp(.3*x1 + .4*x2 + rnorm(1000,0,.4)) %>% round(., 0)
glmp <- glm(y ~ x1 + x2, family="poisson") #b0 = .11996; b1 = .27568; b2 = .35875
### fit a glm model with correct specification
predict(glmp, newdata=data.frame(x1=3,x2=1), type="response")
exp(.11996 + .27568*3 + .35875*1)
dat <- data.frame(x1=x1, x2=x2, y=y)
### model predictions for x2=0
x1hyp <- seq(-3, 3, by=.2)
x2hyp0 <- rep(0, 31)
fits0 <- predict(glmp, newdata=data.frame(x1=x1hyp, x2=x2hyp0), type="response")
hyp0 <- data.frame(x1=x1hyp, x2=x2hyp0, y=fits0)
### model predictions for x2=1
x2hyp1 <- rep(1, 31)
fits1 <- predict(glmp, newdata=data.frame(x1=x1hyp, x2=x2hyp1), type="response")
hyp1 <- data.frame(x1=x1hyp, x2=x2hyp1, y=fits1)
### graph model predictions for x2=1, x2=0
hyps <- full_join(hyp0, hyp1)
ggplot(data=hyps, aes(x=x1, y=y, color=factor(x2))) +
geom_point() +
geom_linerange(x=-2, ymin=filter(hyps, x1==-2, x2==1)$y, ymax=filter(hyps, x1==-2, x2==0)$y, color="black") +
geom_linerange(x=-1, ymin=filter(hyps, x1==-1, x2==1)$y, ymax=filter(hyps, x1==-1, x2==0)$y, color="black") +
geom_linerange(x=0, ymin=filter(hyps, x1==0, x2==1)$y, ymax=filter(hyps, x1==0, x2==0)$y, color="black") +
geom_linerange(x=1, ymin=filter(hyps, x1==1, x2==1)$y, ymax=filter(hyps, x1==1, x2==0)$y, color="black") +
geom_linerange(x=2, ymin=filter(hyps, x1==2, x2==1)$y, ymax=filter(hyps, x1==2, x2==0)$y, color="black") +
ylab("Predicted Count")
############
# Logistic #
############
### create some data from a logistic model
yl <- 1*(1/(1 + exp(-(.3*x1 + .2*x2 + rnorm(1000,0,.3)))) > .5)
glml <- glm(yl ~ x1 + x2, family=binomial(link="logit")) #b0 = -.04762; b1 = 1.26040; b2 = .73
### fit a glm model with correct specification
predict(glml, newdata=data.frame(x1=0,x2=1), type="response")
1/(1 + exp(-(glml$coef[1] + glml$coef[2]*0 + glml$coef[3]*1)))
### model predictions for x2=0
fits0l <- predict(glml, newdata=data.frame(x1=x1hyp, x2=x2hyp0), type="response")
hyp0l <- data.frame(x1=x1hyp, x2=x2hyp0, y=fits0l)
### model predictions for x2=1
fits1l <- predict(glml, newdata=data.frame(x1=x1hyp, x2=x2hyp1), type="response")
hyp1l <- data.frame(x1=x1hyp, x2=x2hyp1, y=fits1l)
### graph model predictions for x2=1, x2=0
hypsl <- full_join(hyp0l, hyp1l)
ggplot(data=hypsl, aes(x=x1, y=y, color=factor(x2))) +
geom_point() +
geom_linerange(x=-2, ymin=filter(hypsl, x1==-2, x2==1)$y, ymax=filter(hypsl, x1==-2, x2==0)$y, color="black") +
geom_linerange(x=-1, ymin=filter(hypsl, x1==-1, x2==1)$y, ymax=filter(hypsl, x1==-1, x2==0)$y, color="black") +
geom_linerange(x=0, ymin=filter(hypsl, x1==0, x2==1)$y, ymax=filter(hypsl, x1==0, x2==0)$y, color="black") +
geom_linerange(x=1, ymin=filter(hypsl, x1==1, x2==1)$y, ymax=filter(hypsl, x1==1, x2==0)$y, color="black") +
geom_linerange(x=2, ymin=filter(hypsl, x1==2, x2==1)$y, ymax=filter(hypsl, x1==2, x2==0)$y, color="black") +
ylab("Predicted Probability")
library('tidyverse')
library('lattice')
library('mice')
dnba <- as.tibble(read.csv('https://raw.githubusercontent.com/mhalvo/teaching/master/NBAcombine.csv'))
dnba$PID <- 1:1000
dnba <-  select(dnba,
Name, PID, Height, Weight, Vertical, T.Q..Spring,
L.A.T., NSeasons)
dnba_m <- select(dnba, -Name) %>% replace(., . == 0, NA)
dnba_m$NSeasons <- replace(dnba_m$NSeasons, is.na(dnba_m$NSeasons), 0)
dnba <- as.tibble(read.csv('https://raw.githubusercontent.com/mhalvo/teaching/master/NBAcombine.csv'))
dnba$PID <- 1:1000
dnba <-  select(dnba,
Name, PID, Height, Weight, Vertical, T.Q..Spring,
L.A.T., NSeasons)
dnba_g <- select(dnba, -Name) %>% replace(., . == 0, NA)
dnba_g$NSeasons <- replace(dnba_g$NSeasons, is.na(dnba_g$NSeasons), 0)
### 0) data load and cleaning ###
dn <- as.tibble(read.csv('https://raw.githubusercontent.com/mhalvo/teaching/master/NBAcombine.csv'))
dn$PID <- 1:1000
dn <-  select(dn,
Name, PID, Height, Weight, Vertical, T.Q..Spring,
L.A.T., NSeasons)
dng <- select(dn, -Name) %>% replace(., . == 0, NA)
dng$NSeasons <- replace(dng$NSeasons, is.na(dng$NSeasons), 0)
dng
dng[complete.cases(dng),]
dng <- dng[complete.cases(dng),]
dng
hist(dng$NSeasons)
library('mass')
install.package('mass')
install.packages('mass')
library('MASS')
?glm.nb
library('pscl')
?golm
?glm
poisson()
binomial()
glm(NSeasons ~ Height + Weight + Vertical + T.Q..Spring + L.A.T., data=dng, family=binomial(link="logit"))
1*(dng$NSeasons > 0)
dng$AnySeasons <- 1*(dng$NSeasons > 0)
glm(AnySeasons ~ Height + Weight + Vertical + T.Q..Spring + L.A.T., data=dng, family=binomial(link="logit"))
Mlogi <- glm(AnySeasons ~ Height + Weight + Vertical + T.Q..Spring + L.A.T., data=dng, family=binomial(link="logit"))
summary(Mlogi)
Mpois <- glm(NSeasons ~ Height + Weight + Vertical + T.Q..Spring + L.A.T., family=poisson(link="log"))
Mpois <- glm(NSeasons ~ Height + Weight + Vertical + T.Q..Spring + L.A.T., data=dng, family=poisson(link="log"))
summary(Mpois)
center(dng)
scale(dng)
scale(dng) %>% class
scale(dng) %>% s
scale(dng) %>% ls
scale(dng) %>% ls()
ls(scale(dng))
scale(dng)
select(dng, Height, Weight, Vertical, T.Q..Spring, L.A.T.)
dng
dng$Height
dng
select(dng, Height, Weight, Vertical, T.Q..Spring, L.A.T.)
select(dng, Height)
?select
library('tidyverse')
?select
?select
select(dng, Height)
detach('MASS')
unload('MASS')
dplyr::select(dng, Height)
dplyr::select(dng, Height, Weight, Vertical, T.Q..Spring, L.A.T.)
scale(dplyr::select(dng, Height, Weight, Vertical, T.Q..Spring, L.A.T.))
as.tibble(scale(dplyr::select(dng, Height, Weight, Vertical, T.Q..Spring, L.A.T.)))
dplyr::select(dng, Height, Weight, Vertical, T.Q..Spring, L.A.T.) <- as.tibble(scale(dplyr::select(dng, Height, Weight, Vertical, T.Q..Spring, L.A.T.)))
as.tibble(scale(dplyr::select(dng, Height, Weight, Vertical, T.Q..Spring, L.A.T.)))
dplyr::select(dng, Height, Weight, Vertical, T.Q..Spring, L.A.T.)
dngc <- as.tibble(scale(dplyr::select(dng, Height, Weight, Vertical, T.Q..Spring, L.A.T.)))
dngc
dngc$AnySeasons <- dng$AnySeasons
dngc$AnySeasons <- dng$AnySeasons
dngc$NSeasons <- dng$NSeasons
dngc$AnySeasons <- dng$AnySeasons
dngc
names(dngc)[1:5] <- c("cHt", "cWt", "cVt", "cTQ", "cLA")
dngc
Mlogi <- glm(AnySeasons ~ cHt + cWt + cVt + cTQ + cLQ, data=dngc, family=binomial(link="logit"))
summary(Mlogi)
Mlogi <- glm(AnySeasons ~ cHt + cWt + cVt + cTQ + cLA, data=dngc, family=binomial(link="logit"))
summary(Mlogi)
Mlogi <- glm(AnySeasons ~ Height + Weight + Vertical + T.Q..Spring + L.A.T., data=dng, family=binomial(link="logit"))
summary(Mlogi)
Mlogi$coefficients
exp(Mlogi$coefficients)
dngc
dng
psych::describe(dng)
?seq
87-69
seq(69, 87, length.out=18)
seq(69, 87, length.out=19)
xhypm <- as.tibble(Height=mean(dng$Height),
Weight=mean(dng$Weight),
Vertical=mean(dng$Weight),
T.Q.Spring=mean(dng$T.Q..Spring),
L.A.T.=mean(dng$L.A.T.))
xhypm
Height=mean(dng$Height)
Height
xhypm <- as.tibble(Height=mean(dng$Height),
Weight=mean(dng$Weight),
Vertical=mean(dng$Vertical),
T.Q.Spring=mean(dng$T.Q..Spring),
L.A.T.=mean(dng$L.A.T.))
xhypm <- as.tibble(data.frame(Height=mean(dng$Height),
Weight=mean(dng$Weight),
Vertical=mean(dng$Vertical),
T.Q.Spring=mean(dng$T.Q..Spring),
L.A.T.=mean(dng$L.A.T.)))
xhypm
?predict
?fitted
fitted(Mlogi, data=xhypm)
predict(Mlogi, data=xhypm)
?predict
predict(Mlogi, newdata=xhypm)
xhypm
xhypm <- as.tibble(data.frame(Height=mean(dng$Height),
Weight=mean(dng$Weight),
Vertical=mean(dng$Vertical),
T.Q..Spring=mean(dng$T.Q..Spring),
L.A.T.=mean(dng$L.A.T.)))
predict(Mlogi, newdata=xhypm)
sd(dng$Vertical)
sd(dng$Height)
list(xhypl) <- list()
xhypl <- list()
xhypl <- list()
dng$Weight
sd(dng$Weight)
mean(dng$Weight)
for(hw in 1:5) {
for(v in 1:5) {
xhypl[h] <- as.tibble(data.frame(Height=72 + hw*3,
Weight=165 + hw*25,
Vertical=26 + v*4,
T.Q..Spring=mean(dng$T.Q..Spring),
L.A.T.=mean(dng$L.A.T.)))
}
}
for(hw in 1:5) {
for(v in 1:5) {
xhypl[hw,v] <- as.tibble(data.frame(Height=72 + hw*3,
Weight=165 + hw*25,
Vertical=26 + v*4,
T.Q..Spring=mean(dng$T.Q..Spring),
L.A.T.=mean(dng$L.A.T.)))
}
}
xhypl <- list()
i <- 1
i <- 1
for(hw in 1:5) {
for(v in 1:5) {
xhypl[i] <- as.tibble(data.frame(Height=72 + hw*3,
Weight=165 + hw*25,
Vertical=26 + v*4,
T.Q..Spring=mean(dng$T.Q..Spring),
L.A.T.=mean(dng$L.A.T.)))
i <- i + 1
}
}
warnings()
xhypl
as.tibble(data.frame(Height=72 + hw*3,
Weight=165 + hw*25,
Vertical=26 + v*4,
T.Q..Spring=mean(dng$T.Q..Spring),
L.A.T.=mean(dng$L.A.T.)))
xhypl <- list()
i <- 1
for(hw in 1:5) {
for(v in 1:5) {
xhypl[i] <- as.tibble(data.frame(Height=72 + hw*3,
Weight=165 + hw*25,
Vertical=26 + v*4,
T.Q..Spring=mean(dng$T.Q..Spring),
L.A.T.=mean(dng$L.A.T.)))
i <- i + 1
}
}
xhypl
warnings()
xhypl <- list()
i <- 1
for(hw in 1:5) {
for(v in 1:5) {
xhypl[[i]] <- as.tibble(data.frame(Height=72 + hw*3,
Weight=165 + hw*25,
Vertical=26 + v*4,
T.Q..Spring=mean(dng$T.Q..Spring),
L.A.T.=mean(dng$L.A.T.)))
i <- i + 1
}
}
xhyp <- as.tibble(Height=seq(69, 87, length.out=38),
Weight=seq(154, 302, length.out=38),
Vertical=seq(25, 44, length.out=38),
T.Q.Spring=seq(),
L.A.T.=c())
xhypl
lapply(xhypl, predict(Mlogi, newdata))
lapply(xhypl, predict(Mlogi, newdata=.))
lapply(xhypl, function(x) predict(Mlogi, newdata=x))
predict(Mlogi, xhypm
)
predict(Mlogi, newdata=xhypm)
xhypl
for(hw in 0:4) {
for(v in 0:4) {
xhypl[[i]] <- as.tibble(data.frame(Height=72 + hw*3,
Weight=165 + hw*25,
Vertical=26 + v*4,
T.Q..Spring=mean(dng$T.Q..Spring),
L.A.T.=mean(dng$L.A.T.)))
i <- i + 1
}
}
xhypl <- list()
i <- 1
for(hw in 0:4) {
for(v in 0:4) {
xhypl[[i]] <- as.tibble(data.frame(Height=72 + hw*3,
Weight=165 + hw*25,
Vertical=26 + v*4,
T.Q..Spring=mean(dng$T.Q..Spring),
L.A.T.=mean(dng$L.A.T.)))
i <- i + 1
}
}
lapply(xhypl, function(x) predict(Mlogi, newdata=x))
xhypl
lapply(xhypl, function(x) predict(Mlogi, newdata=x))
predict(Mlogi, newdata=xhypl[[1]])
lapply(xhypl, function(x) predict(Mlogi, newdata=x, type="response"))
predict(Mlogi, xhypm, type="response")
xhypl
summary(Mlogi)
Mlogi
write.table(dng)
write.table(dng, file="nbagraph.csv", sep=",")
seq(mean(dng$L.A.T.), length.out=38))
seq(mean(dng$L.A.T.), length.out=38)
xhyp <- as.tibble(Height=seq(69, 87, length.out=38),
Weight=seq(154, 302, length.out=38),
Vertical=seq(25, 44, length.out=38),
T.Q.Spring=rep(mean(dng$T.Q..Spring), 38),
L.A.T.=rep(mean(dng$L.A.T.), 38))
write.table(dng, file="nbagraph.csv", sep=",")
rep(mean(dng$T.Q..Spring), 38)
xhyp <- as.tibble(Height=seq(69, 87, length.out=38),
Weight=seq(154, 302, length.out=38),
Vertical=seq(25, 44, length.out=38),
T.Q.Spring=rep(mean(dng$T.Q..Spring), 38),
L.A.T.=rep(mean(dng$L.A.T.), 38))
xhyp <- as.tibble(data.frame(Height=seq(69, 87, length.out=38),
Weight=seq(154, 302, length.out=38),
Vertical=seq(25, 44, length.out=38),
T.Q..Spring=rep(mean(dng$T.Q..Spring), 38),
L.A.T.=rep(mean(dng$L.A.T.), 38)))
xhyp
xhypl <- as.tibble(data.frame(Height=rep(75, 38), # height/weight low
Weight=rep(190, 38),
Vertical=seq(25, 44, length.out=38),
T.Q..Spring=rep(mean(dng$T.Q..Spring), 38),
L.A.T.=rep(mean(dng$L.A.T.), 38)))
xhypl <- as.tibble(data.frame(Height=rep(75, 38), # height/weight low
Weight=rep(190, 38),
Vertical=seq(25, 44, length.out=38),
T.Q..Spring=rep(mean(dng$T.Q..Spring), 38),
L.A.T.=rep(mean(dng$L.A.T.), 38)))
xhypm <- as.tibble(data.frame(Height=rep(78, 38), # height/weight med
Weight=rep(215, 38),
Vertical=seq(25, 44, length.out=38),
T.Q..Spring=rep(mean(dng$T.Q..Spring), 38),
L.A.T.=rep(mean(dng$L.A.T.), 38)))
xhyph <- as.tibble(data.frame(Height=rep(81, 38), # height/weight hi
Weight=rep(240, 38),
Vertical=seq(25, 44, length.out=38),
T.Q..Spring=rep(mean(dng$T.Q..Spring), 38),
L.A.T.=rep(mean(dng$L.A.T.), 38)))
fitsl <- predict(Mlogi, newdata=xhypl, type="response")
fitsl
fitsm <- predict(Mlogi, newdata=xhypm, type="response")
fitsh <- predict(Mlogi, newdata=xhyph, type="response")
fitsl
hypsl <- as.tibble(data.frame(xhypl, fitsl))
hypsl
hypsl <- as.tibble(data.frame(xhypl, P=fitsl))
hypsl
hypsm <- as.tibble(data.frame(xhypm, P=fitsm))
hypsh <- as.tibble(data.frame(xhyph, P=fitsh))
hyps <- full_join(xhypl, xhypm, xhyph)
hyps
hyps <- dplyr::full_join(xhypl, xhypm, xhyph)
hyps <- bind_rows(xhypl, xhypm, xhyph))
hyps <- bind_rows(xhypl, xhypm, xhyph)
hyps
hyps <- bind_rows(hypl, hypm, hyph)
hyps <- bind_rows(hypsl, hypsm, hypsh)
hyps
?rep
1143
114/3
hyps$HW <- rep(1:3, each=38)
hyps$HW
ggplot(data=hyps, aes(x=Vertical, y=P, color=HW)) +
geom_point() +
geom_linerange(x=-1, ymin=filter(hyps, HW==1)$y, ymax=filter(hyps, HW==1)$y, color="black") +
geom_linerange(x=0, ymin=filter(hyps, HW==2)$y, ymax=filter(hyps, HW==2)$y, color="black") +
geom_linerange(x=1, ymin=filter(hyps, HW==3)$y, ymax=filter(hyps, HW==3)$y, color="black") +
ylab("Predicted Prob")
ggplot(data=hyps, aes(x=Vertical, y=P, color=HW)) +
geom_point() +
geom_linerange(x=-1, ymin=0, ymax=1, color="black") +
geom_linerange(x=0, ymin=0, ymax=1, color="black") +
geom_linerange(x=1, ymin=0, ymax=1, color="black") +
ylab("Predicted Prob")
?geom_linerange
ggplot(data=hyps, aes(x=Vertical, y=P, color=HW)) +
geom_point() +
geom_linerange(ymin=0, ymax=1, color="black") +
geom_linerange(ymin=0, ymax=1, color="black") +
geom_linerange(ymin=0, ymax=1, color="black") +
ylab("Predicted Prob")
ggplot(data=hyps, aes(x=Vertical, y=P, color=HW)) +
geom_point() +
geom_linerange(x=-1, ymin=0, ymax=1, color="black") +
geom_linerange(x=0, ymin=0, ymax=1, color="black") +
geom_linerange(x=1, ymin=0, ymax=1, color="black") +
ylab("Predicted Prob")
ggplot(data=hyps, aes(x=Vertical, y=P, color=HW)) +
geom_point() +
geom_linerange(aes(HW=1, ymin=0, ymax=1), color="black") +
geom_linerange(x=0, ymin=0, ymax=1, color="black") +
geom_linerange(x=1, ymin=0, ymax=1, color="black") +
ylab("Predicted Prob")
ggplot(data=hyps, aes(x=Vertical, y=P, color=HW)) +
geom_point() +
ylab("Predicted Prob")
ggplot(data=hyps, aes(x=Vertical, y=P, color=HW)) +
geom_point() +
ylab("Predicted P(NBA)")
